pragma Ada_2020;

with Ada.Numerics.Generic_Elementary_Functions;

with RayTracing_Constants; use RayTracing_Constants;

package body Objects is

   package Float_Numerics is new Ada.Numerics.Generic_Elementary_Functions
     (
      Float_Type => Float15
     );

   function Sqrt(x: Float15) return Float15 renames Float_Numerics.Sqrt;

   function "**" (Left, Right : Float15) return Float15
                  renames Float_Numerics."**";

   function Surface_Of(thing: Thing_Type) return Surface_Type
   is ( thing.Surface );

   function Sphere_Normal(Obj: Thing_Type; Pos: Vector) return Vector is
     ( Normal( Pos - Obj.Position ) );

   function Plane_Normal(Obj: Thing_Type; Pos: Vector) return Vector is
      ( Obj.Position );

   procedure Get_Surface_Properties(
                                    surface: Surface_Type;
                                    pos: Vector;
                                    properties: out Surface_Properties
                                   ) is
   begin
      case surface is
         when Shiny =>
            properties.diffuse := white;
            properties.specular := grey;
            properties.reflect := 0.7;
            properties.roughness := 250.0;
         when Checkerboard =>
            declare val: Integer
                 := Integer( Float15'Floor(pos.z) + Float15'Floor(pos.x) );
            begin
               if val mod 2 /= 0 then
                  properties.reflect := 0.1;
                  properties.diffuse := white;
               else
                  properties.reflect := 0.7;
                  properties.diffuse := black;
               end if;
               properties.specular := white;
               properties.roughness := 150.0;
            end;
      end case;
   end Get_Surface_Properties;

   function Sphere_Intersection(
                                Obj: Thing_Type;
                                Ray: Ray_Type
                               ) return Float15
   is
      eo: Vector := obj.position - ray.start;
      v: Float15 := eo * ray.dir;
   begin
      if v > 0.0 then
         declare
            disc: Float15 := Obj.Size - ( Eo * Eo - V * V );
         begin
            if Disc > 0.0 then
               return V - Sqrt(Disc);
            end if;
         end;
      end if;
      return far_away;
   end Sphere_Intersection;

   function Plane_Intersection( Obj: Thing_Type; Ray: Ray_Type )
   return Float15
   is
      Denom: Float15 := Obj.Position * Ray.Dir;
   begin
      if Denom <= 0.0 then
         return ( Obj.Position * Ray.Start + Obj.Size ) / (-Denom);
      end if;
      return far_away;
   end Plane_Intersection;

   function Intersections(ray: Ray_Type; things: Thing_Array)
                          return Intersection_Type
   is
      closest: Float15 := far_away;
      which: Natural := 0;
      dist: array(things'range) of Float15;
   begin
      for i in things'range loop
         dist(i) := things(i).Check_Intersection(things(i), ray);
         if dist(i) < closest then
            which := i;
         end if;
      end loop;
      return (
              if which = 0 then No_Intersection
              else (
                    thing => things(which),
                    ray => ray,
                    dist => dist(which)
                   )
             );
   end Intersections;

   procedure Create_Sphere(
                           thing: out Thing_Type;
                           center: Vector;
                           radius: Float15;
                           surface: Surface_Type
                          ) is
   begin
      thing := (
                Surface => Surface,
                size => radius * radius, Position => Center,
                Compute_Normal => Sphere_Normal'Access,
                Check_Intersection => Sphere_Intersection'Access
               );
   end Create_Sphere;

   procedure Create_Plane(
                          thing: out Thing_Type;
                          norm: Vector;
                          offset: Float15;
                          surface: Surface_Type
                         ) is
   begin
      thing := (
                Surface => Surface,
                Position => Norm, Size => offset,
                Compute_Normal => Plane_Normal'Access,
                Check_Intersection => Plane_Intersection'Access
               );
   end Create_Plane;

   function Object_Normal(thing: Thing_Type; pos: Vector) return Vector is
      ( thing.Compute_Normal( thing, pos ) );

end Objects;
